import { Meteor } from 'meteor/meteor';
import { Accounts } from 'meteor/accounts-base';

/**
 * üîê M√âTHODES UTILISATEUR
 * 
 * Ce module g√®re toutes les m√©thodes li√©es aux utilisateurs :
 * - Cr√©ation d'utilisateur avec v√©rification email
 * - Renvoi d'email de v√©rification  
 * - V√©rification du statut utilisateur
 * 
 * Avantages de ce module s√©par√© :
 * - Responsabilit√© unique (gestion utilisateurs)
 * - Code testable facilement
 * - R√©utilisable dans d'autres projets
 * - Maintenance simplifi√©e
 */

/**
 * Cr√©ation d'utilisateur avec envoi automatique d'email de v√©rification
 * Utilise la nouvelle m√©thode Accounts.createUserVerifyingEmail
 * 
 * @param {Object} userData - Donn√©es de l'utilisateur √† cr√©er
 * @returns {Object} - R√©sultat de la cr√©ation avec userId et message
 */
export const createUserWithEmailVerification = async (userData) => {
    // üîí Validation des donn√©es c√¥t√© serveur (s√©curit√©)
    if (!userData || typeof userData !== 'object') {
        throw new Meteor.Error('invalid-data', 'Donn√©es utilisateur invalides');
    }

    const { username, email, password } = userData;

    // Validation email
    if (!email || typeof email !== 'string' || !email.includes('@')) {
        throw new Meteor.Error('invalid-email', 'Email invalide');
    }

    // Validation mot de passe
    if (!password || typeof password !== 'string' || password.length < 6) {
        throw new Meteor.Error('invalid-password', 'Mot de passe trop court (minimum 6 caract√®res)');
    }

    // Validation nom d'utilisateur
    if (!username || typeof username !== 'string' || username.trim().length < 2) {
        throw new Meteor.Error('invalid-username', 'Nom d\'utilisateur trop court (minimum 2 caract√®res)');
    }

    try {
        // üîç V√âRIFICATION PR√âVENTIVE DES DOUBLONS
        // V√©rifier si l'email existe d√©j√†
        const existingUserByEmail = await Meteor.users.findOneAsync({
            'emails.address': email.trim().toLowerCase()
        });

        if (existingUserByEmail) {
            throw new Meteor.Error('email-exists', 'Un compte existe d√©j√† avec cet email');
        }

        // V√©rifier si le nom d'utilisateur existe d√©j√†
        const existingUserByUsername = await Meteor.users.findOneAsync({
            username: username.trim()
        });

        if (existingUserByUsername) {
            throw new Meteor.Error('username-exists', 'Ce nom d\'utilisateur est d√©j√† pris');
        }

        // üéØ UTILISATION DE createUserVerifyingEmail
        // Cette m√©thode cr√©e le compte ET envoie l'email automatiquement
        const userId = await Accounts.createUserVerifyingEmail({
            username: username.trim(),
            email: email.trim().toLowerCase(),
            password: password,
            profile: {
                name: username.trim(),
                createdAt: new Date()
            }
        });


        return {
            success: true,
            userId: userId,
            message: 'Compte cr√©√© avec succ√®s ! Un email de v√©rification a √©t√© envoy√©.'
        };

    } catch (error) {
        console.error('‚ùå Erreur cr√©ation utilisateur:', error);

        // Si c'est d√©j√† une Meteor.Error (de nos v√©rifications pr√©ventives), la re-lancer directement
        if (error instanceof Meteor.Error) {
            throw error;
        }

        // Gestion des erreurs sp√©cifiques pour les autres erreurs
        const errorMessage = error.message || error.reason || '';

        if (errorMessage.includes('Email already exists') || errorMessage.includes('email already exists')) {
            throw new Meteor.Error('email-exists', 'Un compte existe d√©j√† avec cet email');
        } else if (errorMessage.includes('Username already exists') || errorMessage.includes('username already exists')) {
            throw new Meteor.Error('username-exists', 'Ce nom d\'utilisateur est d√©j√† pris');
        } else if (error.error === 403) {
            // Erreur 403 souvent utilis√©e pour les comptes existants
            throw new Meteor.Error('account-exists', 'Un compte existe d√©j√† avec ces informations');
        } else {
            throw new Meteor.Error('creation-failed', 'Erreur lors de la cr√©ation du compte');
        }
    }
};

/**
 * Renvoie un email de v√©rification pour l'utilisateur connect√©
 * 
 * @param {String} userId - ID de l'utilisateur (fourni par Meteor.call context)
 * @returns {Object} - R√©sultat de l'envoi
 */
export const resendVerificationEmail = async (userId) => {
    // V√©rification s√©curit√© : utilisateur connect√© requis
    if (!userId) {
        throw new Meteor.Error('not-authorized', 'Vous devez √™tre connect√© pour renvoyer un email de v√©rification');
    }

    // R√©cup√©rer l'utilisateur
    const user = await Meteor.users.findOneAsync(userId);

    if (!user) {
        throw new Meteor.Error('user-not-found', 'Utilisateur introuvable');
    }

    // V√©rifier si l'email est d√©j√† v√©rifi√©
    if (user.emails && user.emails[0] && user.emails[0].verified) {
        throw new Meteor.Error('email-already-verified', 'Votre email est d√©j√† v√©rifi√©');
    }

    try {
        // Renvoyer l'email de v√©rification
        await Accounts.sendVerificationEmail(userId);


        return {
            success: true,
            message: 'Email de v√©rification renvoy√© avec succ√®s'
        };

    } catch (error) {
        console.error('‚ùå Erreur renvoi email de v√©rification:', error);
        throw new Meteor.Error('email-send-failed', 'Erreur lors du renvoi de l\'email');
    }
};

/**
 * V√©rifier le statut d'un utilisateur par email (pour les messages d'erreur de connexion)
 * M√©thode publique utilis√©e pour donner des messages d'erreur sp√©cifiques lors de la connexion
 * 
 * @param {String} email - Email de l'utilisateur √† v√©rifier
 * @returns {Object} - Informations sur l'utilisateur et son statut
 */
export const checkUserEmailVerification = async (email) => {
    // Validation de l'email
    if (!email || typeof email !== 'string' || !email.includes('@')) {
        throw new Meteor.Error('invalid-email', 'Email invalide');
    }

    try {
        // Rechercher l'utilisateur par email
        const user = await Meteor.users.findOneAsync({
            'emails.address': email.trim().toLowerCase()
        });

        if (!user) {
            // Utilisateur non trouv√©
            return {
                userExists: false,
                emailVerified: false,
                message: 'Aucun compte trouv√© avec cet email'
            };
        }

        // V√©rifier si l'email est v√©rifi√©
        const emailVerified = user.emails && user.emails[0] && user.emails[0].verified === true;

        return {
            userExists: true,
            emailVerified: emailVerified,
            message: emailVerified
                ? 'Utilisateur trouv√© avec email v√©rifi√©'
                : 'Utilisateur trouv√© mais email non v√©rifi√©'
        };

    } catch (error) {
        console.error('‚ùå Erreur v√©rification statut utilisateur:', error);
        throw new Meteor.Error('check-failed', 'Erreur lors de la v√©rification du statut utilisateur');
    }
};

/**
 * Enregistrement des m√©thodes Meteor
 * Cette fonction doit √™tre appel√©e pour rendre les m√©thodes disponibles c√¥t√© client
 */
export const registerUserMethods = () => {
    Meteor.methods({
        // M√©thode de cr√©ation d'utilisateur
        'user.createWithEmailVerification': createUserWithEmailVerification,

        // M√©thode de renvoi d'email de v√©rification
        'user.resendVerificationEmail': function () {
            // Dans le contexte d'une m√©thode Meteor, this.userId contient l'ID de l'utilisateur connect√©
            return resendVerificationEmail(this.userId);
        },

        // M√©thode de v√©rification du statut utilisateur
        'checkUserEmailVerification': checkUserEmailVerification
    });

}; 